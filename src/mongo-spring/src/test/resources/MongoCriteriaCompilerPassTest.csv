rest filter,mongoQuery,collection jsonPath,comment
store,"{""store"": {""$exists"": true, ""$ne"": null, ""$not"": {""$size"": 0}}}",$[?@.store],
@.store,"{""store"": {""$exists"": true, ""$ne"": null, ""$not"": {""$size"": 0}}}",$[?@.store],
store.book,"{""store.book"": {""$exists"": true, ""$ne"": null, ""$not"": {""$size"": 0}}}",$[?@.store.book],
"store == ""The Book Haven""","{""store"": ""The Book Haven""}",,
field > 34,"{""field"": {""$gt"": 34}}",,
field < 34,"{""field"": {""$lt"": 34}}",,
field <= 34,"{""field"": {""$lte"": 34}}",,
field >= 34,"{""field"": {""$gte"": 34}}",,
field != 34,"{""field"": {""$ne"": 34}}",,
field == 34,"{""field"": 34}",,
price == 13.55,,,
name =~ /^(charles|darwin|\/\\\$)$/misx,"{""name"": {""$regularExpression"": {""pattern"": ""^(charles|darwin|\\/\\\\\\$)$"", ""options"": ""imsx""}}}",,
name =~ /\/\$\\\//,"{""name"": {""$regularExpression"": {""pattern"": ""\\/\\$\\\\\\/"", ""options"": """"}}}",,
name =~ /foo/b,!error,,invalid regex option
name =~ //,!error,,empty regex
stores.books[*].name,"{""stores.books.name"": {""$exists"": true, ""$ne"": null, ""$not"": {""$size"": 0}}}",,"wildcard works only on arrays, not on objects. wildcard is not required"
stores[?@.books[*].name],"{""stores"": {""$elemMatch"": {""books.name"": {""$exists"": true, ""$ne"": null, ""$not"": {""$size"": 0}}}}}",,
store.books[0].name,"{""store.books.0.name"": {""$exists"": true, ""$ne"": null, ""$not"": {""$size"": 0}}}",,
"books[?@.author==""Charles Darwin""]","{""books"": {""$elemMatch"": {""author"": ""Charles Darwin""}}}",,
"books[?@.author==""Darwin""].price","{""books"": {""$elemMatch"": {""author"": ""Darwin"", ""price"": {""$exists"": true, ""$ne"": null, ""$not"": {""$size"": 0}}}}}",,
"books[?@.author==""Darwin""][?@.category==""fiction""]","{""books"": {""$elemMatch"": {""author"": ""Darwin"", ""category"": ""fiction""}}}",,
books[?@.author],"{""books"": {""$elemMatch"": {""author"": {""$exists"": true, ""$ne"": null, ""$not"": {""$size"": 0}}}}}",,
"books[?@.authors[?@.name==""Darwin""]]","{""books"": {""$elemMatch"": {""authors"": {""$elemMatch"": {""name"": ""Darwin""}}}}}",,
"books[?@.author == ""chuck"" && @.title == ""norris""]","{""books"": {""$elemMatch"": {""author"": ""chuck"", ""title"": ""norris""}}}",,
"externalId[?@.owner==""myself"" && @.identifierType==""orderId"" && @.id==""12346""]","{""externalId"": {""$elemMatch"": {""owner"": ""myself"", ""identifierType"": ""orderId"", ""id"": ""12346""}}}",,
"books[?@.author == ""chuck""][?@.author == ""norris""]",!error,,Duplicated field tests make no sense and might result in compiler issues or unexpected query results
"firstName == ""charles"" && lastName == ""darwin""","{""firstName"": ""charles"", ""lastName"": ""darwin""}",,
"name == """"charles"""" || name == """"darwin""""",,,"or expressions are not supported. top level, you can provide multiple alternatives with ','"
"books[?@.title == ""chuck"" || @.title == ""norris""]",,,
"agreement[?@.[""@referredType""]==""ServiceContract""]",,,
store == 'The Book Haven',,,
['@type'],,"$[?@.[""@type""]]",
books[?(@.title)],,,
"[?(@.title==""book""))]",,,
!@.owner,,,
"!(@.owner==""steve"")",,,
created.gte == 12345,,$[?@.created >= 12345],
books[?@.created > 1234 || @.created < 3244],,,
firstName == lastName,,$[?@.firstName == @.lastName],
flag == false,,,
owner == null,,,Better use existence query
name == $.name,,,we don't support any lookup across different collection entries. no absolute queries allowed
"name == ""\""\r\t\\""",,,
"status == ""closed"", status == ""completed""","{""$or"": [{""status"": ""closed""}, {""status"": ""completed""}]}",,"for simple ors like checking a field, consider using regex match =~"